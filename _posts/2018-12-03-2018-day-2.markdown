---
layout: post
title: "2018 Day 2"
date: "2018-12-02 09:49:24 -0500"
excerpt: "Working smarter in day 2 and reading the input from a file."
---

In day 1, I was dumb and forgot that Python can open and read files, line by line. (I had copied and pasted my input into the script last time.)

This time, I started by writing loops that worked for each of the example sequences. Then, I wrestled the loop into a `readlines()` method, which took some time because I had to rethink how to write the loop. I had been trying to use `enumerate()` on the list, but that wasn't working too well for me. So, I switched to a `range(len([list]))` syntax, which is more Javascript-y, and it clicked for me at that point.

## Part 1
Find the checksum of all IDs in the list

```python
double = 0  # tally the double instances

triple = 0  # tally the triple instances

# Turn the list item into a set for faster processing

def find_matches(string):

    # open a list to hold the results

    result = [];

    # turn the string into a set - no duplicates!

    unique = set(string)

    # Loop through each character in the string...

    for char in unique:

        # push the result as a tuple into the array along with the number of occurrences of that item.

        result.append((char, string.count(char)))

    return result

    # open the file and loop each line

    with open('input.txt') as f:
        for item in f.readlines():

            # pass the string into the unique set function

            res = find_matches(item)

            # Set the variables

            # This prevents multiple triggers if two doubls or two triples are found in the same string.

            dblSet = False
            trplSet = False

            # For the response item...

            for obj in res:

                # If the tuple has a 2, score a point and set the flag.

                if obj[1] == 2:
                    if not dblSet:
                        dblSet = True
                        double += 1

                # Do the same for a 3

                elif obj[1] == 3:
                    if not trplSet:
                        trplSet = True
                        triple += 1

        # Print the product of the doubles and triples

        print(int(double) * int(triple)) # 7688
```

Totally bragging here, but when I got the right answer on the first try, that felt _great_.

## Part 2

Find the two IDs with a single-character difference in the same position

The hardest part for this challenge, for me, was comparing the position of the difference, not just that there was a difference. I started with my nested loop int the `unique()` function instead of calling it for each character of each string. Once I moved the nested loop, it worked well.

```python
# Search two strings for character differences

def find_single_diff(a, b):

    # set a couple flags for position and the number of diffs.

    pos = None
    count = 0

    # Run a loop for each letter in string A (B is equal in length)

    for i in range(len(a)):

        # if the letter is different at the current position...

        if a[i] != b[i]:

            # count 1, store the position

            count +=1
            pos = i

            # If the count is more that 1, break the loop

            if count > 1:
                break

    # Sanitize the return

    if count > 1:
        return False

    if i ==  None:
        return False

    # Send the position and input strings back if a single difference is found.

    return (pos, a, b)

    # convert text to list

    with open('input.txt') as f:
        content = f.readlines()

    # remove the newline characters

    content = [x.strip() for x in content]

    # Loop each item and compare it to the next in the list.

    for i in range(len(content)):
            for j in range(i + 1, len(content)):

                # Send the strings to check for a difference

                result = find_single_diff(content[i], content[j])

                # If there is a true result, print the array

                if result != False:
                    print(result)
```
